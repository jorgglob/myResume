// Generated by Dagger (https://google.github.io/dagger).
package com.example.myresume;

import com.example.myresume.domain.executor.BackgroundExecutor;
import com.example.myresume.domain.executor.UiThreadExecutor;
import com.example.myresume.domain.interactors.GetResumeInteractor;
import com.example.myresume.domain.interactors.GetResumeInteractor_Factory;
import com.example.myresume.domain.repository.ResumeRepository;
import com.example.myresume.domain.resolver.StringsResolver;
import com.example.myresume.view.ResumeActivity;
import com.example.myresume.view.ResumeActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerMockAppComponent implements MockAppComponent {
  private Provider<StringsResolver> providesStringResolverProvider;

  private Provider<ResumeRepository> providesResumeRepositoryProvider;

  private Provider<BackgroundExecutor> providesJobExecutorProvider;

  private Provider<UiThreadExecutor> providesPostExecutionThreadProvider;

  private Provider<GetResumeInteractor> getResumeInteractorProvider;

  private DaggerMockAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MockAppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesStringResolverProvider =
        DoubleCheck.provider(
            MockAppModule_ProvidesStringResolverFactory.create(builder.mockAppModule));
    this.providesResumeRepositoryProvider =
        DoubleCheck.provider(
            MockAppModule_ProvidesResumeRepositoryFactory.create(builder.mockAppModule));
    this.providesJobExecutorProvider =
        DoubleCheck.provider(
            MockThreadModule_ProvidesJobExecutorFactory.create(builder.mockThreadModule));
    this.providesPostExecutionThreadProvider =
        DoubleCheck.provider(
            MockThreadModule_ProvidesPostExecutionThreadFactory.create(builder.mockThreadModule));
    this.getResumeInteractorProvider =
        DoubleCheck.provider(
            GetResumeInteractor_Factory.create(
                providesResumeRepositoryProvider,
                providesJobExecutorProvider,
                providesPostExecutionThreadProvider));
  }

  @Override
  public void inject(ResumeActivity arg0) {
    injectResumeActivity(arg0);
  }

  @Override
  public void inject(UtResumeActivity mainActivity) {
    injectUtResumeActivity(mainActivity);
  }

  private ResumeActivity injectResumeActivity(ResumeActivity instance) {
    ResumeActivity_MembersInjector.injectStringsResolver(
        instance, providesStringResolverProvider.get());
    ResumeActivity_MembersInjector.injectGetResumeInteractor(
        instance, getResumeInteractorProvider.get());
    return instance;
  }

  private UtResumeActivity injectUtResumeActivity(UtResumeActivity instance) {
    UtResumeActivity_MembersInjector.injectStringsResolver(
        instance, providesStringResolverProvider.get());
    UtResumeActivity_MembersInjector.injectGetResumeInteractor(
        instance, getResumeInteractorProvider.get());
    return instance;
  }

  public static final class Builder {
    private MockAppModule mockAppModule;

    private MockThreadModule mockThreadModule;

    private Builder() {}

    public MockAppComponent build() {
      if (mockAppModule == null) {
        this.mockAppModule = new MockAppModule();
      }
      if (mockThreadModule == null) {
        this.mockThreadModule = new MockThreadModule();
      }
      return new DaggerMockAppComponent(this);
    }

    public Builder mockAppModule(MockAppModule mockAppModule) {
      this.mockAppModule = Preconditions.checkNotNull(mockAppModule);
      return this;
    }

    public Builder mockThreadModule(MockThreadModule mockThreadModule) {
      this.mockThreadModule = Preconditions.checkNotNull(mockThreadModule);
      return this;
    }
  }
}
