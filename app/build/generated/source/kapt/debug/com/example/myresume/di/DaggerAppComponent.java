// Generated by Dagger (https://google.github.io/dagger).
package com.example.myresume.di;

import android.content.Context;
import android.content.res.Resources;
import com.example.data.di.ApiModule;
import com.example.data.di.ApiModule_ProvidesGsonFactory;
import com.example.data.di.ApiModule_ProvidesOkHttpClientFactory;
import com.example.data.di.ApiModule_ProvidesResumeApiServiceFactory;
import com.example.data.di.ApiModule_ProvidesRetrofitFactory;
import com.example.data.di.ApiModule_ProvidesRxJava2CallAdapterFactoryFactory;
import com.example.data.di.DataModule;
import com.example.data.di.DataModule_ProvidesDatabaseProviderFactory;
import com.example.data.di.DataModule_ProvidesLocalDataSourceFactory;
import com.example.data.local.CacheDataSource;
import com.example.data.local.CacheDatabaseProvider;
import com.example.data.services.ResumeApiServices;
import com.example.myresume.domain.executor.BackgroundExecutor;
import com.example.myresume.domain.executor.UiThreadExecutor;
import com.example.myresume.domain.interactors.GetResumeInteractor;
import com.example.myresume.domain.interactors.GetResumeInteractor_Factory;
import com.example.myresume.domain.repository.ResumeRepository;
import com.example.myresume.domain.resolver.StringsResolver;
import com.example.myresume.view.ResumeActivity;
import com.example.myresume.view.ResumeActivity_MembersInjector;
import com.google.gson.Gson;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> providesAppContextProvider;

  private Provider<Resources> providesResourcesProvider;

  private Provider<StringsResolver> providesStringResolverProvider;

  private Provider<Gson> providesGsonProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<RxJava2CallAdapterFactory> providesRxJava2CallAdapterFactoryProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<ResumeApiServices> providesResumeApiServiceProvider;

  private Provider<CacheDatabaseProvider> providesDatabaseProvider;

  private Provider<CacheDataSource> providesLocalDataSourceProvider;

  private Provider<ResumeRepository> providesResumeRepositoryProvider;

  private Provider<BackgroundExecutor> providesJobExecutorProvider;

  private Provider<UiThreadExecutor> providesPostExecutionThreadProvider;

  private Provider<GetResumeInteractor> getResumeInteractorProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesAppContextProvider =
        DoubleCheck.provider(AppModule_ProvidesAppContextFactory.create(builder.appModule));
    this.providesResourcesProvider =
        DoubleCheck.provider(
            AppModule_ProvidesResourcesFactory.create(
                builder.appModule, providesAppContextProvider));
    this.providesStringResolverProvider =
        DoubleCheck.provider(
            AppModule_ProvidesStringResolverFactory.create(
                builder.appModule, providesResourcesProvider));
    this.providesGsonProvider =
        DoubleCheck.provider(ApiModule_ProvidesGsonFactory.create(builder.apiModule));
    this.providesOkHttpClientProvider =
        DoubleCheck.provider(ApiModule_ProvidesOkHttpClientFactory.create(builder.apiModule));
    this.providesRxJava2CallAdapterFactoryProvider =
        DoubleCheck.provider(
            ApiModule_ProvidesRxJava2CallAdapterFactoryFactory.create(builder.apiModule));
    this.providesRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvidesRetrofitFactory.create(
                builder.apiModule,
                providesGsonProvider,
                providesOkHttpClientProvider,
                providesRxJava2CallAdapterFactoryProvider));
    this.providesResumeApiServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvidesResumeApiServiceFactory.create(
                builder.apiModule, providesRetrofitProvider));
    this.providesDatabaseProvider =
        DoubleCheck.provider(DataModule_ProvidesDatabaseProviderFactory.create(builder.dataModule));
    this.providesLocalDataSourceProvider =
        DoubleCheck.provider(
            DataModule_ProvidesLocalDataSourceFactory.create(
                builder.dataModule, providesDatabaseProvider));
    this.providesResumeRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvidesResumeRepositoryFactory.create(
                builder.appModule,
                providesResumeApiServiceProvider,
                providesLocalDataSourceProvider));
    this.providesJobExecutorProvider =
        DoubleCheck.provider(
            ThreadsModule_ProvidesJobExecutorFactory.create(builder.threadsModule));
    this.providesPostExecutionThreadProvider =
        DoubleCheck.provider(
            ThreadsModule_ProvidesPostExecutionThreadFactory.create(builder.threadsModule));
    this.getResumeInteractorProvider =
        DoubleCheck.provider(
            GetResumeInteractor_Factory.create(
                providesResumeRepositoryProvider,
                providesJobExecutorProvider,
                providesPostExecutionThreadProvider));
  }

  @Override
  public void inject(ResumeActivity resumeActivity) {
    injectResumeActivity(resumeActivity);
  }

  private ResumeActivity injectResumeActivity(ResumeActivity instance) {
    ResumeActivity_MembersInjector.injectStringsResolver(
        instance, providesStringResolverProvider.get());
    ResumeActivity_MembersInjector.injectGetResumeInteractor(
        instance, getResumeInteractorProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private ApiModule apiModule;

    private DataModule dataModule;

    private ThreadsModule threadsModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (apiModule == null) {
        throw new IllegalStateException(ApiModule.class.getCanonicalName() + " must be set");
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (threadsModule == null) {
        this.threadsModule = new ThreadsModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder threadsModule(ThreadsModule threadsModule) {
      this.threadsModule = Preconditions.checkNotNull(threadsModule);
      return this;
    }
  }
}
