// Generated by Dagger (https://google.github.io/dagger).
package com.example.myresume.di;

import com.example.data.local.CacheDataSource;
import com.example.data.services.ResumeApiServices;
import com.example.myresume.domain.repository.ResumeRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvidesResumeRepositoryFactory implements Factory<ResumeRepository> {
  private final AppModule module;

  private final Provider<ResumeApiServices> resumeServicesProvider;

  private final Provider<CacheDataSource> cacheDataSourceProvider;

  public AppModule_ProvidesResumeRepositoryFactory(
      AppModule module,
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    this.module = module;
    this.resumeServicesProvider = resumeServicesProvider;
    this.cacheDataSourceProvider = cacheDataSourceProvider;
  }

  @Override
  public ResumeRepository get() {
    return provideInstance(module, resumeServicesProvider, cacheDataSourceProvider);
  }

  public static ResumeRepository provideInstance(
      AppModule module,
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    return proxyProvidesResumeRepository(
        module, resumeServicesProvider.get(), cacheDataSourceProvider.get());
  }

  public static AppModule_ProvidesResumeRepositoryFactory create(
      AppModule module,
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    return new AppModule_ProvidesResumeRepositoryFactory(
        module, resumeServicesProvider, cacheDataSourceProvider);
  }

  public static ResumeRepository proxyProvidesResumeRepository(
      AppModule instance, ResumeApiServices resumeServices, CacheDataSource cacheDataSource) {
    return Preconditions.checkNotNull(
        instance.providesResumeRepository(resumeServices, cacheDataSource),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
