// Generated by Dagger (https://google.github.io/dagger).
package com.example.data.repository;

import com.example.data.local.CacheDataSource;
import com.example.data.services.ResumeApiServices;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ResumeInformationDataRepository_Factory
    implements Factory<ResumeInformationDataRepository> {
  private final Provider<ResumeApiServices> resumeServicesProvider;

  private final Provider<CacheDataSource> cacheDataSourceProvider;

  public ResumeInformationDataRepository_Factory(
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    this.resumeServicesProvider = resumeServicesProvider;
    this.cacheDataSourceProvider = cacheDataSourceProvider;
  }

  @Override
  public ResumeInformationDataRepository get() {
    return provideInstance(resumeServicesProvider, cacheDataSourceProvider);
  }

  public static ResumeInformationDataRepository provideInstance(
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    return new ResumeInformationDataRepository(
        resumeServicesProvider.get(), cacheDataSourceProvider.get());
  }

  public static ResumeInformationDataRepository_Factory create(
      Provider<ResumeApiServices> resumeServicesProvider,
      Provider<CacheDataSource> cacheDataSourceProvider) {
    return new ResumeInformationDataRepository_Factory(
        resumeServicesProvider, cacheDataSourceProvider);
  }

  public static ResumeInformationDataRepository newResumeInformationDataRepository(
      ResumeApiServices resumeServices, CacheDataSource cacheDataSource) {
    return new ResumeInformationDataRepository(resumeServices, cacheDataSource);
  }
}
