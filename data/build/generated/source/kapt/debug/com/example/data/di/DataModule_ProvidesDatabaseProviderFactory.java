// Generated by Dagger (https://google.github.io/dagger).
package com.example.data.di;

import com.example.data.local.CacheDatabaseProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class DataModule_ProvidesDatabaseProviderFactory
    implements Factory<CacheDatabaseProvider> {
  private final DataModule module;

  public DataModule_ProvidesDatabaseProviderFactory(DataModule module) {
    this.module = module;
  }

  @Override
  public CacheDatabaseProvider get() {
    return provideInstance(module);
  }

  public static CacheDatabaseProvider provideInstance(DataModule module) {
    return proxyProvidesDatabaseProvider(module);
  }

  public static DataModule_ProvidesDatabaseProviderFactory create(DataModule module) {
    return new DataModule_ProvidesDatabaseProviderFactory(module);
  }

  public static CacheDatabaseProvider proxyProvidesDatabaseProvider(DataModule instance) {
    return Preconditions.checkNotNull(
        instance.providesDatabaseProvider(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
